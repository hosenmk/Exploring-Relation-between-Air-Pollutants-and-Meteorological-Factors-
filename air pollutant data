import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import ElasticNet
from sklearn.cross_decomposition import PLSRegression
from sklearn.decomposition import PCA
from sklearn.metrics import r2_score

# Step 1: Load and prepare your dataset
# Assuming you have a CSV file named 'data.csv'
data = pd.read_csv('AQI Compiled Data csv.csv')
data.head()

# Splitting into independent variables (X) and dependent variables (Y)
X = data[['Precipitation (mm/d)', 'Specific Humidity (Mass fraction)',
       'Temperature (k)', 'Wind_f_inst (m/s)', 'Air Pressure (Pa)']]
Y = data[['CO column number density (micromole/m^2)', 'NO2 column number density (micromole/m^2)',
       'SO2 column number density (micromole/m^2)',
       'O3 column number density (micromole/m^2)', 'Optical Depth 047']]

# Plot histograms for each variable
plt.figure(figsize=(10, 6))
plt.hist(X['Precipitation (mm/d)'], bins=30, alpha=0.5, label='Precipitation')
plt.title('Histogram of a Single Variable')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Plot histograms for each variable
plt.figure(figsize=(10, 6))
plt.hist(X['Specific Humidity (Mass fraction)'], bins=30, alpha=0.5, label='Specific Humidity (Mass fraction)')
plt.title('Histogram of Specific Humidity')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()


# Plot histograms for each variable
plt.figure(figsize=(10, 6))
plt.hist(X['Temperature (k)'], bins=30, alpha=0.5, label='Temperature (k)')
plt.title('Histogram of Temperature (k)')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Plot histograms for each variable
plt.figure(figsize=(10, 6))
plt.hist(X['Wind_f_inst (m/s)'], bins=30, alpha=0.5, label='Wind_f_inst (m/s)')
plt.title('Histogram of Wind_f_inst (m/s)')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Plot histograms for each variable
plt.figure(figsize=(10, 6))
plt.hist(X['Air Pressure (Pa)'], bins=30, alpha=0.5, label='Air Pressure (Pa)')
plt.title('Histogram of a Air Pressure (Pa)')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Perform Shapiro-Wilk test
statistic, p_value = stats.shapiro(X['Precipitation (mm/d)'])

# Print the results
print("Shapiro-Wilk Test:")
print(f"Test Statistic: {statistic}")
print(f"P-value: {p_value}")

# Interpret the results
alpha = 0.05
if p_value > alpha:
    print("The sample looks Gaussian (fail to reject H0)")
else:
    print("The sample does not look Gaussian (reject H0)")


# Perform Shapiro-Wilk test
statistic, p_value = stats.shapiro(X['Specific Humidity (Mass fraction)'])

# Print the results
print("Shapiro-Wilk Test:")
print(f"Test Statistic: {statistic}")
print(f"P-value: {p_value}")

# Interpret the results
alpha = 0.05
if p_value > alpha:
    print("The sample looks Gaussian (fail to reject H0)")
else:
    print("The sample does not look Gaussian (reject H0)")







